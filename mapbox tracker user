import React, { useEffect, useState } from 'react';
import { View, StyleSheet, Dimensions, ActivityIndicator } from 'react-native';
import MapboxGL, { Logger } from '@rnmapbox/maps';
import Geolocation from '@react-native-community/geolocation';
// import { useNavigation, useRoute } from '@react-navigation/native';
import { APIKEY } from '../utils/key';

import Ionicons from 'react-native-vector-icons/Ionicons';

Logger.setLogCallback((log) => {
    const { message } = log;

    if (
        message.match('Request failed due to a permanent error: Canceled') ||
        message.match('Request failed due to a permanent error: Socket Closed')
    ) {
        return true;
    }
    return false;
});
MapboxGL.setAccessToken(APIKEY);
// MapboxGL.setConnected(true);
MapboxGL.setTelemetryEnabled(false);
MapboxGL.setWellKnownTileServer('Mapbox');
Geolocation.setRNConfiguration({
    skipPermissionRequests: false,
    authorizationLevel: 'auto',
});

const routeProfiles = [
    { id: 'walking', label: 'Walking', icon: 'walking' },
    { id: 'cycling', label: 'Cylcing', icon: 'bicycle' },
    { id: 'driving', label: 'Driving', icon: 'car' },
];
const StoreLocation: React.FC = () => {
    const [routeDirections, setRouteDirections] = useState<any | null>(null);
    const [coords, setCoords] = useState<[number, number]>([-70.66554798708195, 19.429209433430955]);

    const [distance, setDistance] = useState(null);
    const [duration, setDuration] = useState(null);
    const [destinationCoords, setDestinationCoords] = useState<[number, number]>([
        -70.67198543117796, 19.426943089275902,
    ]);
    const [loading, setLoading] = useState(true);
    const [selectedRouteProfile, setselectedRouteProfile] = useState<string>('walking');

    const store = {
        id: '2',
        name: 'Utesa',
        imageUrl:
            'https://e0.pxfuel.com/wallpapers/674/159/desktop-wallpaper-night-aesthetic-dekstop-at-street-aesthetic.jpg',
        latitude: 19.4334715580511,
        longitude: -70.69318996203569,
        description: '...',
    };

    async function getPermissionLocation() {
        try {
            const geo = await Geolocation.getCurrentPosition(
                (location) => setCoords([location.coords.longitude, location.coords.latitude]),
                (err) => console.log(err),
                { enableHighAccuracy: true }
            );
        } catch (error) {
            console.error('Error getting location', error);
        }
    }

    useEffect(() => {
        getPermissionLocation();
        createRouterLine(coords);
        //console.log(store.longitude);
        // if (selectedRouteProfile !== null) {
        //     createRouterLine(coords);
        // }
    }, [coords]);

    function makeRouterFeature(coordinates: [number, number][]): any {
        let routerFeature = {
            type: 'FeatureCollection',
            features: [
                {
                    type: 'Feature',
                    properties: {},
                    geometry: {
                        type: 'LineString',
                        coordinates: coordinates,
                    },
                },
            ],
        };
        return routerFeature;
    }

    async function createRouterLine(coords: [number, number]): Promise<void> {
        const startCoords = `${coords[0]},${coords[1]}`;
        const endCoords = `${[store.longitude, store.latitude]}`;
        const geometries = 'geojson';
        const typeVehicle = 'driving';

        const url = `https://api.mapbox.com/directions/v5/mapbox/${typeVehicle}/${startCoords};${endCoords}?alternatives=true&geometries=${geometries}&steps=true&banner_instructions=true&overview=full&voice_instructions=true&access_token=${APIKEY}`;

        try {
            let response = await fetch(url);
            let json = await response.json();

            const data = json.routes.map((data: any) => {
                console.log(data);
                setDistance((data.distance / 1000).toFixed(2));
                setDuration((data.duration / 3600).toFixed(2));
            });

            let coordinates = json['routes'][0]['geometry']['coordinates'];
            let destinationCoordinates = json['routes'][0]['geometry']['coordinates'].slice(-1)[0];
            setDestinationCoords(destinationCoordinates);
            if (coordinates.length) {
                const routerFeature = makeRouterFeature([...coordinates]);
                setRouteDirections(routerFeature);
            }
            setLoading(false);
        } catch (e) {
            setLoading(false);
            console.log(e);
        }
    }

    return (
        <View style={styles.container}>
            <MapboxGL.MapView
                style={styles.map}
                zoomEnabled={true}
                styleURL="mapbox://styles/mapbox/navigation-night-v1"
                rotateEnabled={true}
                onDidFinishLoadingMap={async () => {
                    await createRouterLine(coords, selectedRouteProfile);
                }}
            >
                <MapboxGL.Camera
                    zoomLevel={10}
                    centerCoordinate={[-70.66554798708195, 19.429209433430955]}
                    animationMode={'flyTo'}
                    animationDuration={6000}
                />
                {routeDirections && (
                    <MapboxGL.ShapeSource id="line1" shape={routeDirections}>
                        <MapboxGL.LineLayer
                            id="routerLine01"
                            style={{
                                lineColor: '#FA9E14',
                                lineWidth: 4,
                            }}
                        />
                    </MapboxGL.ShapeSource>
                )}
                {destinationCoords && (
                    <MapboxGL.PointAnnotation id="destinationPoint" coordinate={destinationCoords}>
                        <View style={styles.destinationIcon}>
                            <Ionicons name="storefront" size={24} color="#E1710A" />
                        </View>
                    </MapboxGL.PointAnnotation>
                )}
                <MapboxGL.UserLocation animated={true} androidRenderMode={'gps'} showsUserHeadingIndicator={true} />
            </MapboxGL.MapView>

            {loading && <ActivityIndicator size="large" color="white" style={styles.loadingIndicator} />}
        </View>
    );
};

const styles = StyleSheet.create({
    container: {
        flex: 1,
    },
    map: {
        flex: 1,
    },
    backButton: {
        position: 'absolute',
        top: 20,
        left: 20,
        zIndex: 1,
        backgroundColor: 'rgba(0, 0 ,0 , 0.5)',
        borderRadius: 20,
        padding: 8,
    },
    loadingIndicator: {
        position: 'absolute',
        top: '50%',
        left: '50%',
        zIndex: 2,
    },
    cardContainer: {
        position: 'absolute',
        top: 20,
        right: 20,
        zIndex: 1,
    },
    destinationIcon: {
        width: 30,
        height: 30,
        justifyContent: 'center',
        alignItems: 'center',
    },
    routeProfileList: {
        paddingVertical: 10,
        paddingHorizontal: 10,
        backgroundColor: 'transparent',
        zIndex: 1,
    },
    flatList: {
        position: 'absolute',
        bottom: 20,
        left: Dimensions.get('window').width / 2 - 40,
        right: 0,
        backgroundColor: 'transparent',
        zIndex: 1,
    },
    routeProfileButton: {
        width: 80,
        height: 80,
        borderRadius: 40,
        marginHorizontal: 8,
        borderColor: '#fff',
        borderWidth: 1,
        alignItems: 'center',
        justifyContent: 'center',
        backgroundColor: 'rgba(0, 0, 0, 0.4)',
    },
    selectedRouteProfileButton: {
        backgroundColor: '#FA9E14',
        borderColor: '#FA9E14',
    },
    routeProfileButtonText: {
        color: '#fff',
        marginTop: 5,
    },
    selectedRouteProfileButtonText: {
        color: 'white',
    },
});

export default StoreLocation;
