import React, { useEffect, useMemo, useState, useRef } from 'react';
import { StyleSheet, SafeAreaView, Dimensions, Image, View } from 'react-native';
import MapView, { PROVIDER_GOOGLE, Marker } from 'react-native-maps';
import MapViewDirections from 'react-native-maps-directions';


const GOOGLE_PLACES_API_KEY = 'AIzaSyDj4t6Z_P4Iw8Az0-CrpfJZamqCHrwM950'

const screen = Dimensions.get('window');
const ASPECT_RATIO = screen.width / screen.height;
const LATITUDE_DELTA = 0.04;
const LONGITUDE_DELTA = LATITUDE_DELTA * ASPECT_RATIO;


const GeoPositionTracker = ({
  coords,
  currentDriverPosition,
  vendorPosition
}) => {

  const marker = useRef()
  const map = useRef()

  console.log(JSON.stringify(currentDriverPosition, null, 2))

  const [coord, setCoord] = useState({
    latitude: vendorPosition.latitude,
    longitude: vendorPosition.longitude,
    latitudeDelta: LATITUDE_DELTA,
    longitudeDelta: LONGITUDE_DELTA,
  });
  const [destination, setDestination] = useState({
    latitude: coords.latitude,
    longitude: coords.longitude,
    latitudeDelta: LATITUDE_DELTA,
    longitudeDelta: LONGITUDE_DELTA,
  });

  // useEffect(() => {
  //   map.current.animateToRegion({
  //     latitude: vendorPosition.latitude,
  //     longitude: vendorPosition.longitude,
  //     latitudeDelta: LATITUDE_DELTA,
  //     longitudeDelta: LONGITUDE_DELTA,
  //   })
  // }, [])



  useEffect(() => {
    if (currentDriverPosition) {
      // setCoord({
      //   latitude: currentDriverPosition.latitude,
      //   longitude: currentDriverPosition.longitude,
      //   latitudeDelta: LATITUDE_DELTA,
      //   longitudeDelta: LONGITUDE_DELTA,
      // });

      if (Platform.OS === 'android') {
        marker.current.animateMarkerToCoordinate({
          latitude: currentDriverPosition.latitude,
          longitude: currentDriverPosition.longitude,
          latitudeDelta: LATITUDE_DELTA,
          longitudeDelta: LONGITUDE_DELTA
        })

        // map.current.animateToRegion({
        //   latitude: vendorPosition.latitude,
        //   longitude: vendorPosition.longitude,
        //   latitudeDelta: LATITUDE_DELTA,
        //   longitudeDelta: LONGITUDE_DELTA,
        // })
        // setCoord({
        //   latitude: currentDriverPosition.latitude,
        //   longitude: currentDriverPosition.longitude,
        //   latitudeDelta: LATITUDE_DELTA,
        //   longitudeDelta: LONGITUDE_DELTA
        // })

      } else {
        markerOrigin.current.region.timing({
          latitude: 38.3368456,
          longitude: -122.0299002,
          latitudeDelta: 0.0043,
          longitudeDelta: 0.0041,
          duration: 10000,
        }).start()
      }
    }
  }, [currentDriverPosition]);


  const Directions = useMemo(() => {
    return (
      coord && destination && (
        <MapViewDirections
          origin={coord}
          destination={destination}
          apikey={GOOGLE_PLACES_API_KEY}
          strokeColor="hotpink"
          strokeWidth={4}
          optimizeWaypoints={true}
        />
      )
    );
  }, [coord, destination]);

  return (
    <View style={styles.container}>
      <MapView provider={PROVIDER_GOOGLE} style={styles.map} initialRegion={coord} ref={map}>
        {coord !== undefined && (
          <Marker coordinate={coord} ref={marker} />
        )}

        {destination !== undefined && <Marker coordinate={destination} />}

        <MapViewDirections
          origin={coord}
          destination={destination}
          apikey={GOOGLE_PLACES_API_KEY}
          strokeColor="hotpink"
          strokeWidth={4}
          optimizeWaypoints={true}
        />
        {/* {Directions} */}
      </MapView>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    height: 200,
    width: '100%'
    // flex: 1,
  },
  map: {
    ...StyleSheet.absoluteFillObject,
    zIndex: 0,
  },
  searchContainer: {
    zIndex: 1,
    flex: 0.5,
    marginHorizontal: 10,
    marginVertical: 5,
  },
});

export default GeoPositionTracker;
