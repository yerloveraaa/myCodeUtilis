import * as React from 'react'
import { useCallback, useRef, useState, useEffect } from 'react'
import { Alert, AlertButton, Linking, StyleSheet, View, Dimensions, Platform } from 'react-native'
import { Code, useCameraDevice, useCodeScanner } from 'react-native-vision-camera'
import { Camera } from 'react-native-vision-camera'
import { useIsFocused } from '@react-navigation/core'
import { useSafeAreaInsets } from 'react-native-safe-area-context';
import { AppState } from 'react-native'
import { IconButton } from '@jmstechnologiesinc/react-native-paper'

export const useIsForeground = () => {
    const [isForeground, setIsForeground] = useState(true)

    useEffect(() => {
        const onChange = (state) => {
            setIsForeground(state === 'active')
        }
        const listener = AppState.addEventListener('change', onChange)
        return () => listener.remove()
    }, [setIsForeground])

    return isForeground
}

export const CONTENT_SPACING = 15
export const MAX_ZOOM_FACTOR = 10
export const CAPTURE_BUTTON_SIZE = 78
export const CONTROL_BUTTON_SIZE = 40

const showCodeAlert = (value, onDismissed) => {
    const buttons = [
        {
            text: 'Close',
            style: 'cancel',
            onPress: onDismissed,
        },
    ]
    if (value.startsWith('http')) {
        buttons.push({
            text: 'Open URL',
            onPress: () => {
                Linking.openURL(value)
                onDismissed()
            },
        })
    }
    Alert.alert('Scanned Code', value, buttons)
}

const CodeScannerPage = ({ navigation }) => {
    const device = useCameraDevice('back')
    const insets = useSafeAreaInsets();
    const isFocused = useIsFocused()
    const isForeground = useIsForeground()
    const isActive = isFocused && isForeground
    const [torch, setTorch] = useState(false)
    const isShowingAlert = useRef(false)
    const cameraRef = useRef(null);

    const onCodeScanned = useCallback((codes) => {
        console.log(`Scanned ${codes.length} codes:`, codes)
        const value = codes[0]?.value
        if (value == null) return
        if (isShowingAlert.current) return
        showCodeAlert(value, () => {
            isShowingAlert.current = false
        })
        isShowingAlert.current = true
    }, [])

    const codeScanner = useCodeScanner({
        codeTypes: ['qr', 'ean-13'],
        onCodeScanned: onCodeScanned,
    })

    const takePhoto = async () => {
        if (cameraRef.current) {
            const photo = await cameraRef.current.takePhoto({
                flash: torch ? 'on' : 'off',
            });
            console.log('Photo taken:', photo);
            Alert.alert('Photo Taken', `Photo saved at ${photo.path}`);
        }
    };

    return (
        <View style={styles.container}>
            {device != null && (
                <Camera
                    ref={cameraRef}
                    style={StyleSheet.absoluteFill}
                    device={device}
                    isActive={isActive}
                    codeScanner={codeScanner}
                    torch={torch ? 'on' : 'off'}
                    photo={true}
                    enableZoomGesture={true}
                />
            )}

            <View style={{
                position: 'absolute',
                right: CONTENT_SPACING + insets.right,
                top: CONTENT_SPACING + insets.bottom,
            }}>
                <IconButton
                    icon={torch ? 'flash' : 'flash-off'}
                    selected
                    mode="contained-tonal"
                    size={24}
                    onPress={() => setTorch(!torch)}
                />
            </View>

            <View style={{
                position: 'absolute',
                bottom: CONTENT_SPACING + insets.bottom,
                left: '50%',
                marginLeft: -(CAPTURE_BUTTON_SIZE / 2),
            }}>
                <IconButton
                    icon="camera"
                    selected
                    mode="contained-tonal"
                    size={CAPTURE_BUTTON_SIZE}
                    onPress={takePhoto}
                />
            </View>
        </View>
    )
}

export default CodeScannerPage

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: 'black',
    },
})
