   // const registrationToken = 'dvtyAKcZQJyVQl-XUu4NN4:APA91bEKpRzCpbnivC5JHIsTnTr0MeHzg-6f0thulGHgXETte3qhOHHcg7mJMF2XdTtsbv-L75JXjoabSrNcKJPdY615cxql--C_iYDIdoddF9tTDfCS0C_YPrb_id_sj5Z2jsi25lS8';

    // const driver = 'ei89Lk95IEhHl-Rrfxdcc9:APA91bEhetFGBo6-xlQxjM28eQ0uylmoHMB8cW69R4w1nZoH_NsUzUamIUbyKCKZsRuhHZquHYWd8jTBx7NrNZrmrnZOgxnNdWBqyNyz231UC02BNsmMJTYIEXcbv1y7mbOe4mS3ZQ1k'

    // const message = {
    //     data: {
    //         score: '850',
    //         time: '2:45'
    //     },
    //     token: registrationToken
    // };

    // // Send a message to the device corresponding to the provided
    // // registration token.
    // admin.messaging().send(message)
    //     .then((response) => {
    //         console.log('Successfully sent message:', response);
    //     })
    //     .catch((error) => {
    //         console.log('Error sending message:', error);
    //     });
    
    
    
async function userNotifications(orderData) {
    // Get the user from Firestore
    const getDeviceTokensPromise = admin.firestore()
        .collection('users').doc(uid).get();
    // Get the User profile from Firebase Auth
    const getUserProfilePromise = admin.auth().getUser(uid);
    // Send notifications to all tokens.
    Promise.all([getDeviceTokensPromise, getUserProfilePromise])
        .then(function (results) {

            // // The array containing all the user's tokens.
            const tokens = Object.keys(results[0].data().pushToken);

            if (tokens.length === 0) {
                return console.log('There are no notification tokens to send to.');
            }

            const user = results[1];

            // // Notification details.
            const payload = {
                notification: {
                    title: 'Payment completed!',
                    body: `Thank you, ${user.displayName}, we received your payment.`
                }
            };

            // Send notifications to all tokens.
            admin.messaging().sendToDevice(tokens, payload)
                .then(function (response) {
                    console.log('Successfully sent push: ', response);
                    return response;
                })
                .catch(function (error) {
                    console.log('Error sending push:', error);
                });

            return results;
        })
        .catch(function (error) {
            console.log('Error retrieving tokens or user details:', error);
        });

}




import React, { useEffect } from 'react';
import { SafeAreaView, StyleSheet, View, Text, ToastAndroid, Platform } from 'react-native';
import messaging from '@react-native-firebase/messaging';
const TOPIC = 'Notification';
const App = () => {
    const requestUserPermission = async () => {
        //On ios,checking permission before sending and receiving messages
        const authStatus = await messaging().requestPermission();
        return (
            authStatus === messaging.AuthorizationStatus.AUTHORIZED ||
            authStatus === messaging.AuthorizationStatus.PROVISIONAL
        );
    };
    const getFcmToken = () => {
        // Returns an FCM token for this device
        messaging()
            .getToken()
            .then((fcmToken) => {
                console.log('FCM Token -> ', fcmToken);
            });
    }
    const receiveNotificationFromQuitState = () => {
        messaging()
            .getInitialNotification()
            .then(async (remoteMessage) => {
                if (remoteMessage) {
                    showToast(
                        'getInitialNotification:' +
                        'Notification caused app to open from quit state',
                    );
                }
            });
    }
    const receiveBackgroundNotification = () => {
        messaging().onNotificationOpenedApp(async (remoteMessage) => {
            if (remoteMessage) {
                showToast(
                    'onNotificationOpenedApp: ' +
                    'Notification caused app to open from background state',
                );
            }
        });
    }
    //stop listening for new messages.
    const unsubscribeDeviceTopic = messaging().onMessage(
        async (remoteMessage) => {
            showToast("New notification arrived" + JSON.stringify(remoteMessage));
        });
    const backgroundThread = () => {
        //It's called when the app is in the background or terminated
        messaging().setBackgroundMessageHandler(
            async (remoteMessage) => {
                showToast("Background notification" + JSON.stringify(remoteMessage));
            });
    }
    const subscribeTopicToGetNotification = () => {
        /**
        * based on Topic, FCM server to send targeted 
        * messages to only those devices subscribed to that topic
        */
        messaging()
            .subscribeToTopic(TOPIC)
            .then(() => {
                console.log(`Topic: ${TOPIC} Suscribed`);
            });
    }
    useEffect(() => {
        if (requestUserPermission()) {
            getFcmToken();
        } else {
            console.log('Not Authorization status:', authStatus);
        }
        receiveNotificationFromQuitState();
        receiveBackgroundNotification();
        backgroundThread();
        subscribeTopicToGetNotification();

        return () => {
            unsubscribeDeviceTopic;
            // messaging().unsubscribeFromTopic(TOPIC);
        };
    }, []);
    const showToast = (message) => {
        if (Platform.OS == 'ios') {
            alert(message);
        } else {
            ToastAndroid.show(message, ToastAndroid.SHORT);
        }
    };
    return (
        <SafeAreaView style={styles.container}>
            <View style={styles.container}>
                <Text style={styles.titleText}>Push Notification</Text>
                <Text style={styles.textStyle}>using</Text>
                <Text style={styles.titleText}>Firebase Cloud Messaging</Text>
            </View>
        </SafeAreaView>
    );
};
const styles = StyleSheet.create({
    container: {
        flex: 1,
        alignItems: 'center',
        justifyContent: 'center',
        textAlign: 'center',
        backgroundColor: '#fff',
    },
    titleText: {
        fontSize: 20,
        textAlign: 'center',
        fontWeight: 'bold',
        marginVertical: 10,
        color: '#000',
    },
    textStyle: {
        fontSize: 20,
        fontWeight: 'bold',
        textAlign: 'center',
        marginBottom: 10,
        color: '#707070',
    },
});
export default App;
